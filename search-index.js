var searchIndex = {};
searchIndex['figtree'] = {"items":[[0,"","figtree","A library to parse and work with figtree documents.",null,null],[3,"Position","","Represents a position in the file",null,null],[12,"line","","line of the file",0,null],[12,"pos","","position in that line",0,null],[3,"Figtree","","Opens, parses, and reads figtree files.",null,null],[4,"LexToken","","A enum representing different kinds of lexed event",null,null],[13,"OpenBrace","","",1,null],[13,"CloseBrace","","",1,null],[13,"OpenBracket","","",1,null],[13,"CloseBracket","","",1,null],[13,"Comma","","",1,null],[13,"Colon","","",1,null],[13,"Bang","","",1,null],[13,"Identifier","","",1,null],[13,"StringLit","","",1,null],[13,"IntegerLit","","",1,null],[13,"FloatLit","","",1,null],[4,"LexError","","An enum representing different kinds of lexing errors",null,null],[13,"UnclosedCommentError","","",2,null],[13,"UnclosedStringError","","",2,null],[13,"UnclosedIdentError","","",2,null],[13,"NewlineInIdentifier","","",2,null],[13,"InvalidEscape","","",2,null],[13,"InvalidUnicodeEscape","","",2,null],[13,"FloatParseError","","",2,null],[13,"IntegerParseError","","",2,null],[13,"UnrecognisedCharError","","",2,null],[4,"ParseError","","An enum representing an error that occurs during parsing.",null,null],[13,"LexError","","",3,null],[13,"UnexpectedEndOfFile","","",3,null],[13,"UnexpectedToken","","",3,null],[13,"RepeatedNode","","",3,null],[11,"eq","","",0,{"inputs":[{"name":"position"},{"name":"position"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"position"},{"name":"position"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"position"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new position at `(0, 0)`",0,{"inputs":[{"name":"position"}],"output":{"name":"self"}}],[11,"at","","Construct a new position at an arbitrary line and position",0,{"inputs":[{"name":"position"},{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"clone","","",1,{"inputs":[{"name":"lextoken"}],"output":{"name":"lextoken"}}],[11,"eq","","",1,{"inputs":[{"name":"lextoken"},{"name":"lextoken"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"lextoken"},{"name":"lextoken"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"lextoken"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"lexerror"},{"name":"lexerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"lexerror"},{"name":"lexerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"lexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"types","","A collection of types that define a figtree document.",null,null],[3,"Node","figtree::types","A struct representing an individual node in a parsed document",null,null],[3,"Document","","A struct representing a parsed figtree document.",null,null],[4,"Value","","A type to represent a figtree value",null,null],[13,"Str","","",4,null],[13,"Int","","",4,null],[13,"Float","","",4,null],[13,"Bool","","",4,null],[13,"Ident","","",4,null],[13,"Dict","","",4,null],[13,"List","","",4,null],[13,"Null","","",4,null],[6,"Dict","","A type to represent a figtree dict",null,null],[6,"List","","A type to represent a figtree list",null,null],[11,"eq","","",4,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_string","","Construct a new string `Value`.",4,{"inputs":[{"name":"value"},{"name":"s"}],"output":{"name":"self"}}],[11,"new_ident","","Construct a new identifier `Value`.",4,{"inputs":[{"name":"value"},{"name":"s"}],"output":{"name":"self"}}],[11,"new_int","","Construct a new integer `Value`.",4,{"inputs":[{"name":"value"},{"name":"i64"}],"output":{"name":"self"}}],[11,"new_float","","Construct a new float `Value`.",4,{"inputs":[{"name":"value"},{"name":"f64"}],"output":{"name":"self"}}],[11,"new_bool","","Construct a new boolean `Value`.",4,{"inputs":[{"name":"value"},{"name":"bool"}],"output":{"name":"self"}}],[11,"new_null","","Construct a new null `Value`.",4,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"from_parsed_value","","",4,{"inputs":[{"name":"value"},{"name":"parsedvalue"}],"output":{"name":"self"}}],[11,"get_str","","Extract the contained value if it is a string.",4,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"get_int","","Extract the contained value if it is an integer",4,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"get_float","","Extract the contained value if it is a float",4,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"get_bool","","Extract the contained value if it is a boolean",4,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"get_ident","","Extract the contained (&str) value if it is an identifier",4,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"get_dict","","Extract the contained value if it is a dict",4,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"get_list","","Extract the contained value as a slice if it is a list",4,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"is_null","","",4,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"node"},{"name":"node"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"node"},{"name":"node"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"node"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new, empty node",5,{"inputs":[{"name":"node"}],"output":{"name":"self"}}],[11,"new_node_or_get","","Construct a new node and automatically insert it as a subnode.",5,{"inputs":[{"name":"node"},{"name":"s"}],"output":{"name":"self"}}],[11,"insert_node","","Inserts a node into this node as a subnode.",5,{"inputs":[{"name":"node"},{"name":"s"},{"name":"node"}],"output":{"name":"option"}}],[11,"delete_node","","Remove a subnode from this node.",5,{"inputs":[{"name":"node"},{"name":"s"}],"output":{"name":"option"}}],[11,"get_node","","Get a reference to the specified subnode",5,{"inputs":[{"name":"node"},{"name":"s"}],"output":{"name":"option"}}],[11,"get_node_mut","","Get a mutable reference to the specified subnode",5,{"inputs":[{"name":"node"},{"name":"s"}],"output":{"name":"option"}}],[11,"iter_nodes","","Get an iterable of (&name, &node) pairs",5,{"inputs":[{"name":"node"}],"output":{"name":"iter"}}],[11,"insert_attr","","Insert a new value into this node.",5,{"inputs":[{"name":"node"},{"name":"s"},{"name":"value"}],"output":{"name":"option"}}],[11,"delete_attr","","Remove an attribute from this node.",5,{"inputs":[{"name":"node"},{"name":"s"}],"output":{"name":"option"}}],[11,"get_attr","","Get a reference to the specified attribute value",5,{"inputs":[{"name":"node"},{"name":"s"}],"output":{"name":"option"}}],[11,"get_attr_mut","","Get a mutable reference to the specified attribute value",5,{"inputs":[{"name":"node"},{"name":"s"}],"output":{"name":"option"}}],[11,"iter_attrs","","Get an iterable of (&name, &attribute) pairs",5,{"inputs":[{"name":"node"}],"output":{"name":"iter"}}],[11,"is_empty","","Test if this node has no subnodes or attributes",5,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"has_node","","Test if this node has a subnode with the given name.",5,{"inputs":[{"name":"node"},{"name":"string"}],"output":{"name":"bool"}}],[11,"has_nodes","","Test if this node has any subnodes at all.",5,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"node_count","","Returns the number of subnodes.",5,{"inputs":[{"name":"node"}],"output":{"name":"usize"}}],[11,"has_attr","","Test if this node had an attribute with the given key.",5,{"inputs":[{"name":"node"},{"name":"string"}],"output":{"name":"bool"}}],[11,"has_attrs","","Test if this node has any attributes at all.",5,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"attr_count","","Returns the number of attributes.",5,{"inputs":[{"name":"node"}],"output":{"name":"usize"}}],[11,"eq","","",6,{"inputs":[{"name":"document"},{"name":"document"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"document"},{"name":"document"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"document"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new, empty document",6,{"inputs":[{"name":"document"}],"output":{"name":"self"}}],[11,"new_node_or_get","","Construct a new node and insert it into the document.",6,{"inputs":[{"name":"document"},{"name":"s"}],"output":{"name":"node"}}],[11,"insert_node","","Inserts a node into the document.",6,{"inputs":[{"name":"document"},{"name":"s"},{"name":"node"}],"output":{"name":"option"}}],[11,"delete_node","","Remove a node from the document.",6,{"inputs":[{"name":"document"},{"name":"s"}],"output":{"name":"option"}}],[11,"get_node","","Get a reference to a specified node",6,{"inputs":[{"name":"document"},{"name":"s"}],"output":{"name":"option"}}],[11,"get_node_mut","","Get a mutable reference to a specified node",6,{"inputs":[{"name":"document"},{"name":"s"}],"output":{"name":"option"}}],[11,"iter_nodes","","Get an iterable of (&name, &node) pairs",6,{"inputs":[{"name":"document"}],"output":{"name":"iter"}}],[11,"is_empty","","Test if the document is empty - if it has no nodes.",6,{"inputs":[{"name":"document"}],"output":{"name":"bool"}}],[11,"has_node","","Test if the document has a given node.",6,{"inputs":[{"name":"document"},{"name":"string"}],"output":{"name":"bool"}}],[11,"has_nodes","","Test if the document has any nodes.",6,{"inputs":[{"name":"document"}],"output":{"name":"bool"}}],[11,"node_count","","Returns the number of nodes in the document.",6,{"inputs":[{"name":"document"}],"output":{"name":"usize"}}],[11,"new","figtree","Constructs a `Figtree` instance from a generic `Read` implementor.",7,{"inputs":[{"name":"figtree"},{"name":"t"}],"output":{"name":"self"}}],[11,"from_filename","","Constructs a `Figtree` instance from a local file.",7,{"inputs":[{"name":"figtree"},{"name":"t"}],"output":{"name":"result"}}],[11,"from_string","","Constructs a `Figtree` instance from a &str or String.",7,{"inputs":[{"name":"figtree"},{"name":"t"}],"output":{"name":"figtree"}}],[11,"parse","","Parse the document stored in this `Figtree` instance into a `Document`.",7,{"inputs":[{"name":"figtree"}],"output":{"name":"result"}}]],"paths":[[3,"Position"],[4,"LexToken"],[4,"LexError"],[4,"ParseError"],[4,"Value"],[3,"Node"],[3,"Document"],[3,"Figtree"]]};
initSearch(searchIndex);
